package br.com.api.controller;import br.com.api.models.Funcionario;import br.com.api.models.Holerite;import br.com.api.repository.FuncionarioRepository;import br.com.api.repository.HoleriteRepository;import br.com.api.service.holerite.ServiceHolerite;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.format.annotation.DateTimeFormat;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.time.LocalDate;import java.util.Optional;import java.util.List;@RestController@RequestMapping("/api/holerites")public class HoleriteController {	@Autowired	private HoleriteRepository holeriteRepository;	@Autowired	private FuncionarioRepository funcionarioRepository;	@Autowired	private ServiceHolerite serviceHolerite;	@GetMapping("/{idHolerite}")	public ResponseEntity<Holerite> buscarHoleritePorId(@PathVariable Long idHolerite) {		Optional<Holerite> holerite = holeriteRepository.findById(idHolerite);		if (holerite.isEmpty()) {			return ResponseEntity.notFound().build();		}		return ResponseEntity.ok(holerite.get());	}	@GetMapping("/consultar-holerites/{cpf}")	public ResponseEntity<List<Holerite>> buscarHolerites(@PathVariable String cpf) {		List<Holerite> holerites = holeriteRepository.findAllByFuncionarioCpf(cpf);		if (holerites.isEmpty()) {			return ResponseEntity.notFound().build();		}		return ResponseEntity.ok(holerites);	}	@GetMapping("/consultar-holerite/cpf={cpf}&data={dataHolerite}")	public ResponseEntity<Holerite> buscarHolerite(@PathVariable String cpf,			@PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate dataHolerite) {		Optional<Holerite> holerite = holeriteRepository.buscarHolerite(cpf, dataHolerite);		if (holerite.isEmpty()) {			return ResponseEntity.notFound().build();		}		return ResponseEntity.ok(holerite.get());	}	@PostMapping("/gerar-holerite/{idFuncionario}&{data}")	public ResponseEntity<Holerite> gerarHolerite(@PathVariable Long idFuncionario,			@PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate data) {		Optional<Funcionario> funcionario = funcionarioRepository.findById(idFuncionario);		if (funcionario.isEmpty()) {			return ResponseEntity.notFound().build();		}		Holerite holerite = serviceHolerite.gerarHolerite(funcionario.get(), data);		return ResponseEntity.ok(holerite);	}}